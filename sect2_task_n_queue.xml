<sect1 xmlns="http://docbook.org/ns/docbook"
       xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>2 - task and queue</title>
    <para>传统的多任务机制是进程和线程（对于单个应用来说主要是线程），由操作系统提供。mac os x和ios还提供了更高层（作为应用首选）的多任务机制：框架级的cocoa operation queue和系统级的grand central dispatch queue；每个队列管理一个线程池，任务（在逻辑上同时执行的代码单位）不是作为线程由操作系统直接调度（分配到处理器），而是通过进入队列（称为分派到队列）来由队列调度（分配到线程）。首先，队列提供的线程池管理（根据系统负载动态调整线程的数量）有助于更好得利用多核处理器的性能，应用通常无需象使用线程机制那样考虑任务数量对于性能的影响，一方面提高了性能，另一方面简化了任务间的同步（如生产者-消费者问题，如果不限制消费者任务的数量，每个产品对应一个消费者任务，就无需处理生产者任务以及多个消费者任务之间的复杂的同步）；但需要注意的是，队列对任务的调度不如操作系统对线程的调度及时，队列中的任务分配到线程相比线程分配到处理器需要更长的响应时间（操作系统对线程的调度是分时的，队列对其中任务的调度是批处理的），因此需要及时响应的大量并发仍需使用线程机制，并且在并发量大的情况下，仍需考虑任务数量（任务本身的开销）对性能的影响。另外，队列的顺序特性（fifo）可以为某些任务同步方式（如互斥）提供更方便和高效的支持。</para>
    <sect2>
        <title>2.1 - dispatch queue</title>
        <para>作为队列，dispatch队列按fifo顺序调度（出队列并分配到线程执行）其中的任务；顺序（serial）（执行）队列等待当前任务执行完毕后再调度下一个（同时仅执行一个任务），并发（concurrent）（执行）队列则不等待（同时执行多个任务，仅受线程池中线程数量的限制）。gcd（grand central dispatch）为应用提供了3个不同优先级的全局（global）并发队列，1个main顺序队列（其中的任务总是调度到主线程，即通过主线程的事件循环调度），应用也可以自行构造私有（private）顺序队列。dispatch队列（以及其它dispatch对象如dispatch group, dispatch semaphore, dispatch source等）是引用计数的对象，但应用无需维护全局队列和main队列的引用计数；任务在执行完毕之前会retain所在的dispatch队列。</para>
        <programlisting><![CDATA[
    dispatch_queue_t dispatch_get_main_queue(void);
    dispatch_queue_t dispatch_get_global_queue(long priority,
                                               unsigned long flags);
    // - return the default concurrent queue if called from outside of a block
    dispatch_queue_t dispatch_get_current_queue(void);
    dispatch_queue_t dispatch_queue_create(char const *label,
                                           dispatch_queue_attr_t attr);

    void dispatch_async(dispatch_queue_t queue, dispatch_block_t block);
    void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block);
    void dispatch_apply(size_t iterations,
                        dispatch_queue_t queue,
                        void (^block)(size_t));

    void dispatch_resume(dispatch_object_t obj);
    void dispatch_suspend(dispatch_object_t obj);

    void dispatch_retain(dispatch_object_t obj);
    void dispatch_release(dispatch_object_t obj);
        ]]></programlisting>
        <para>包括dispatch队列在内的所有dispatch对象都可以关联一个由应用提供的上下文，应用还可以为dispatch对象提供一个finalizer以便在dispatch对象析构之前释放上下文。</para>
        <programlisting><![CDATA[
    void dispatch_set_context(dispatch_object_t obj, void *context);
    void *dispatch_get_context(dispatch_object_t obj);

    void dispatch_set_finalizer_f(dispatch_object_t obj,
                                  dispatch_function_t finalizer);
        ]]></programlisting>
        <para>除了顺序队列提供的同步能力，gcd还提供了dispatch group（可以全部完成后调度指定任务或被等待全部完成的一组任务）和dispatch semaphore（仅在需要阻塞的情况下陷入内核，但仅仅是信号量，而不是信号量集）作为同步机制。</para>
        <programlisting><![CDATA[
    dispatch_group_t dispatch_group_create(void);
    void dispatch_group_async(dispatch_group_t group,
                              dispatch_queue_t queue,
                              dispatch_block_t block);
    // - to schedule the specified block after the group finished
    void dispatch_group_notify(dispatch_group_t group,
                               dispatch_queue_t queue,
                               dispatch_block_t block);
    long dispatch_group_wait(dispatch_group_t group,
                             dispatch_time_t timeout);

    dispatch_semaphore_t dispatch_semaphore_create(long count);
    long dispatch_semaphore_wait(dispatch_semaphore_t dsema,
                                 dispatch_time_t timeout);
    long dispatch_semaphore_signal(dispatch_semaphore_t dsema);
        ]]></programlisting>
        <para>dispatch队列中的任务为函数或block，block是apple为c语言扩展的闭包特性；闭包是指在块（如c的函数）内定义的代码块可以在块外执行，即该代码块和其定义环境（同时也是执行该代码块所需的环境，又称为引用环境）形成了闭包。在c这种静态语言中，block（代码块及其引用环境）开始都在定义域的栈中（因而不能在定义域之外执行，或者说尚未形成闭包），为了保留到定义域之外，需要将它们复制到堆中（Block_copy()宏，block实际上是objc对象，因而相当于向block发送copy消息，Block_release()宏即相当于向block发送release消息）；引用环境中的普通局部变量按值复制到堆中（对象指针的复制还会导致retain对象，block则也copy），对于block相当于const变量；引用环境中的__block变量可以理解为<footnote id="note1"><para>表示仅仅出于理解目的的假设。</para></footnote>存储在堆中按引用访问的对象，按引用复制到堆中（也作为对象retain，但对于对象指针，其指向的对象却不会retain），因此可以在定义域及其中定义的所有block（包括已copy的）之间共享；另外，方法中的block对成员的引用会retain对象。注意，block（对象）的定义总是指包含代码块的block表达式，而非block名（指针，block表达式的值）的定义；此外，block是objc中唯一可以在栈中的对象，但只有堆中的block才是真正的闭包（代码块及其引用环境的闭包，因此只有堆中的block析构时才会release其引用环境中的对象）；另外，copy堆中的block相当于retain。block进入队列时自动copy，执行完毕后自动release。尽管并非必须，block提供了一种方便的匿名inline回调机制（尤其适合作为非框架机制（作为被调用者的功能性机制）提供的回调，如容器方法中的元素compare回调，作为任务的回调等，调用者通常在其中提供机制规定的功能层面的定制，由于不在业务层面而不适合作为（调用者或其它业务对象的）方法；或者说，使用block的策略就是总是只在block中包含不适合作为方法的代码（使block始终在功能层面，以免破坏业务对象设计（变成面向过程），在使用block作为任务时尤其要注意））。</para>
        <example>
            <title>block</title>
            <programlisting><![CDATA[
    typedef int (^MyBlockType)(char, int);
    MyBlockType b = ^(char ch, int i)
    {
        // to do ...
    };
            ]]></programlisting>
        </example>
        <para>注意，每个任务都需要独立的最外层的autorelease pool。在mac os x和ios中，每个线程都有独立的autorelease pool栈和异常跳转环境栈；主线程在application（NSApplication或UIApplication）的run方法中为runloop的每个事件句柄都提供了autorelease pool，dispatch队列为其中的每个任务也提供了autorelease pool；但只有mac os x sdk在NSApplication的run方法中提供了最外层的异常捕获（ios sdk没有为application以及dispatch队列中的任务提供异常捕获）。</para>
        <para>此外，应用还可以用dispatch source自动（无需事件循环）捕获并由指定的任务（称为事件句柄，在指定的dispatch队列）响应各种系统事件，包括定时，信号，（文件和socket）描述符，进程，mach port等。dispatch source会以事件特定的方式合并在事件句柄开始响应（执行）之前发生的事件，事件句柄正在响应（执行）时发生的事件则会保留，等待事件句柄执行完毕后响应。dispatch source初始为suspended状态，需要应用手工resume（dispatch_resume(...)）。dispatch source在cancel之前会retain其目标dispatch队列，cancel会回调cancel句柄（对于dispatch source，通常用cancel句柄代替finalizer）。由于通常用dispatch source自动捕获事件，因此dispatch队列中的任务通常均为后台任务（没有事件循环）；通常只有主线程有事件循环，支持在指定线程（主线程）执行代码（任务），作为任务间的消息发送机制的替代形式。</para>
        <programlisting><![CDATA[
    dispatch_source_t dispatch_source_create(dispatch_source_type_t type,
                                             uintptr_t handle,
                                             unsigned long mask,
                                             dispatch_queue_t queue);
    void dispatch_source_set_event_handler(dispatch_source_t source,
                                           dispatch_block_t handler);
    void dispatch_source_set_timer(dispatch_source_t source,
                                   dispatch_time_t time,
                                   uint64_t interval,
                                   uint64_t leeway);
    void dispatch_source_set_cancel_handler(dispatch_source_t source,
                                            dispatch_block_t handler);
    void dispatch_set_target_queue(dispatch_object_t obj,
                                   dispatch_queue_t queue);

    uintptr_t dispatch_source_get_handle(dispatch_source_t source);
    unsigned long dispatch_source_get_data(dispatch_source_t source);
    unsigned long dispatch_source_get_mask(dispatch_source_t source);

    void dispatch_source_cancel(dispatch_source_t source);
        ]]></programlisting>
    </sect2>
    <sect2>
        <title>2.2 - operation queue</title>
        <para>operation队列（NSOperationQueue）实际上并非队列数据结构，也不按fifo顺序调度，而是通过优先级（高的任务会先于优先级低的任务调度），依赖关系（任务必须等待其依赖的任务执行完毕（finished）后才能调度（ready））等设置其中任务的调度顺序；operation队列都是并发的，但同时执行的任务数量的限制是可配置的（1即相当于顺序队列）。此外，可以通过key-value observing监听任务的状态（包括ready, executing, finished等，依赖即通过监听依赖的任务的状态是否finished来决定是否ready；注意，observer handler可能在被监听任务上下文回调），以及（在其它任务）取消（cancel，并非terminate，仅设置取消标志）任务的执行（取消后状态为finished）。operation队列中的任务为operation（NSOperation），NSOperation是一个抽象类，除了继承它，更常用的是它的两个子类：NSInvocationOperation（方法作为任务）和NSBlockOperation（block作为任务）。</para>
        <programlisting><![CDATA[
    NSOperation:
        - (void) setQueuePriority: (NSOperationQueuePriority)priority;
        - (void) addDependency: (NSOperation *)op;

        - (BOOL) isReady;
        - (BOOL) isExecuting;
        - (BOOL) isFinished;

        - (void) cancel;
        - (void) waitUntilFinished;

    NSInvocationOperation: NSOperation
        - (id) initWithTarget: (id)target selector: (SEL)sel object: (id)arg;

    NSOperationQueue:
        - (void) setMaxConcurrentOperationCount: (NSInteger)count;

        - (void) addOperation: (NSOperation *)op;
        - (void) addOperations: (NSArray *)ops waitUntilFinished: (BOOL)wait;

        - (void) setSuspended: (BOOL)suspend;
        ]]></programlisting>
    </sect2>
</sect1>
